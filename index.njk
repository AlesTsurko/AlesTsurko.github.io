---
itemsPerPage: 6
---
{% extends "_includes/default.njk" %}

{% block title %}Ales Tsurko | Home{% endblock %}

{% block content %}
  <div class="fixed inset-0 flex justify-center items-top m-20 font-paragraph" x-data="TableData()">
      <div>
      <table class="table-fixed" width="600px">
        <thead class="bg-black text-white">
          <tr class="font-header text-2xl h-20">
            <th class="w-1/3">
                <button class="hover:text-gray-200" 
                    x-text="theadText(0)" 
                    @click="data.sort(compareValues('name')); changePageTo(0)">
                </button>
            </th>
            <th>
                <button class="hover:text-gray-200" 
                    x-text="theadText(1)" 
                    @click="data.sort(compareValues('type')); changePageTo(0)">
                </button>
            </th>
            <th>
                <button class="hover:text-gray-200" 
                    x-text="theadText(2)" 
                    @click="data.sort(compareValues('year')); changePageTo(0)">
                </button>
            </th>
            <th>
                <button class="hover:text-gray-200" 
                    x-text="theadText(3)" 
                    @click="data.sort(compareValues('role')); changePageTo(0)">
                </button>
            </th>
          </tr>
        </thead>
        <tbody>
          <template x-for="item in data.slice(dataStartPos, dataEndPos())" :key="item">
            <tr class="h-15">
            <td class="font-subheader p-4"><a class="underline hover:no-underline" x-bind:href="item.url" x-text="item.name" target="_blank"></a></td>
              <td x-text="item.type"></td>
              <td x-text="item.year"></td>
              <td x-text="item.role"></td>
            </tr>
          </template>
        </tbody>
      </table>
      <ol class="m-8">
          <template x-for="num in numberOfPages" :key="num">
              <li class="float-left">
                <button class="w-8 h-8" x-bind:class="pageButtonStyle(num-1)" x-text="num" @click="changePageTo(num - 1)"></button>
              </li>
          </template>
      </ol>
      </div>
  </div>
  <script>
  const data = {{stuff | dump | safe}};
  const itemsNum = {{itemsPerPage}};
  const numberOfPages = Math.trunc(data.length / itemsNum) + 1;
    function TableData() {
      return {
          data,
          numberOfPages,
          currentPage: 0,
          dataStartPos: 0,
          selectedSortHeadKey: "",
          sortingOrder: "asc",
          dataEndPos() {
              return Math.min(this.dataStartPos + itemsNum, data.length);
          },
        compareValues(key) {
            if (key === this.selectedSortHeadKey) {
                this.sortingOrder = this.sortingOrder === "asc" ? "desc" : "asc";
            } else {
                this.sortingOrder = "asc";
            }
            this.selectedSortHeadKey = key;
            let order = this.sortingOrder;
            
            return function innerSort(a, b) {
              if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
                return 0;
              }

              const varA = typeof a[key] === "string" ? a[key].toUpperCase() : a[key];
              const varB = typeof b[key] === "string" ? b[key].toUpperCase() : b[key];

              let comparison = 0;
              if (varA > varB) {
                comparison = 1;
              } else if (varA < varB) {
                comparison = -1;
              }
              return order === "desc" ? comparison * -1 : comparison;
            };
          },
          changePageTo(pageNum) {
              if (pageNum > numberOfPages) return;
              this.currentPage = pageNum;
              this.dataStartPos = pageNum * itemsNum;
          },
          pageButtonStyle(pageNum) {
              return pageNum === this.currentPage ? "text-white bg-red-500 hover:bg-red-400" : "hover:bg-gray-200";
          },
          theadText(num) {
              let name = "Unknown";
              switch(num) {
                 case 0:
                     name = "Name";
                     break;
                 case 1:
                     name = "Type";
                     break;
                 case 2:
                     name = "Year";
                     break;
                 case 3:
                     name = "Role";
                     break;
                 default:
                     return name;
              }

              if (name.toUpperCase() === this.selectedSortHeadKey.toUpperCase()) {
                  let orderIndicator = this.sortingOrder === "asc" ? " ↓" : " ↑";
                  return name + orderIndicator;
              }

              return name;
          }
      };
    }
  </script>
{% endblock %}
